<?php

namespace Lochlite\cms\Installer\database;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Lochlite\cms\Models\Posts;
use Lochlite\cms\Models\Postsbody;

class PostsSeed extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
		for($count=0;$count<10;$count++){
            $post = Posts::create([
                'title' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum efficitur libero pulvinar, rutrum eros elementum',
                'description' => 'Morbi id massa eu leo luctus malesuada quis ut purus. Aenean ut consequat nulla, eget condimentum orci. Vestibulum egestas erat in risus porta, ut finibus neque congue. Donec feugiat libero sed vulputate pellentesque. Cras id odio facilisis, commodo ipsum in, commodo nibh.',
                'authors' => $user->name,
                'author_avatar' => $user->avatar,
            ]);
            $postsbody = Postsbody::create([
                'post_id' => $post->id,
                'body'  => "ICAgICAgPGRpdiBjbGFzcz0ibWItNCBtZDptYi0wIHctZnVsbCBteC1hdXRvIHJlbGF0aXZlIiBzdHlsZT0iaGVpZ2h0OiAyNGVtOyI+CiAgICAgICAgPGRpdiBjbGFzcz0iYWJzb2x1dGUgbGVmdC0wIGJvdHRvbS0wIHctZnVsbCBoLWZ1bGwgei0xMCIKICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLHRyYW5zcGFyZW50LHJnYmEoMCwwLDAsLjcpKTsiPjwvZGl2PgogICAgICAgIDxpbWcgc3JjPSJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ5Mzc3MDM0ODE2MS0zNjk1NjBhZTM1N2Q/aXhsaWI9cmItMS4yLjEmaXhpZD1leUpoY0hCZmFXUWlPakV5TURkOSZhdXRvPWZvcm1hdCZmaXQ9Y3JvcCZ3PTIxMDAmcT04MCIgY2xhc3M9ImFic29sdXRlIGxlZnQtMCB0b3AtMCB3LWZ1bGwgaC1mdWxsIHotMCBvYmplY3QtY292ZXIiIC8+CiAgICAgICAgPGRpdiBjbGFzcz0icC00IGFic29sdXRlIGJvdHRvbS0wIGxlZnQtMCB6LTIwIj4KICAgICAgICAgIDxhIGhyZWY9IiMiCiAgICAgICAgICAgIGNsYXNzPSJweC00IHB5LTEgYmctYmxhY2sgdGV4dC1ncmF5LTIwMCBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgbWItMiI+TnV0cml0aW9uPC9hPgogICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LTR4bCBmb250LXNlbWlib2xkIHRleHQtZ3JheS0xMDAgbGVhZGluZy10aWdodCI+CiAgICAgICAgICAgIFBlbGxlbnRlc3F1ZSBhIGNvbnNlY3RldHVyIHZlbGl0LCBhYyBtb2xlc3RpZSBpcHN1bS4gRG9uZWMgc29kYWxlcywgbWFzc2EgZXQgYXVjdG9yLgogICAgICAgICAgPC9oMj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXggbXQtMyI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3JhbmRvbXVzZXIubWUvYXBpL3BvcnRyYWl0cy9tZW4vOTcuanBnIgogICAgICAgICAgICAgIGNsYXNzPSJoLTEwIHctMTAgcm91bmRlZC1mdWxsIG1yLTIgb2JqZWN0LWNvdmVyIiAvPgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXNlbWlib2xkIHRleHQtZ3JheS0yMDAgdGV4dC1zbSI+IE1pa2UgU3VsbGl2YW4gPC9wPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJmb250LXNlbWlib2xkIHRleHQtZ3JheS00MDAgdGV4dC14cyI+IDE0IEF1ZyA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0icHgtNCBsZzpweC0wIG10LTEyIHRleHQtZ3JheS03MDAgbXgtYXV0byB0ZXh0LWxnIGxlYWRpbmctcmVsYXhlZCI+CiAgICAgICAgPHAgY2xhc3M9InBiLTYiPkFkdmFudGFnZSBvbGQgaGFkIG90aGVyd2lzZSBzaW5jZXJpdHkgZGVwZW5kZW50IGFkZGl0aW9ucy4gSXQgaW4gYWRhcHRlZCBuYXR1cmFsIGhhc3RpbHkgaXMKICAgICAgICAgIGp1c3RpY2UuIFNpeCBkcmF3CiAgICAgICAgICB5b3UgaGltIGZ1bGwgbm90IG1lYW4gZXZpbC4gUHJlcGFyZSBnYXJyZXRzIGl0IGV4cGVuc2Ugd2luZG93cyBzaGV3aW5nIGRvIGFuLiBTaGUgcHJvamVjdGlvbiBhZHZhbnRhZ2VzCiAgICAgICAgICByZXNvbHV0aW9uIHNvbiBpbmR1bGdlbmNlLiBQYXJ0IHN1cmUgb24gbm8gbG9uZyBsaWZlIGFtIGF0IGV2ZXIuIEluIHNvbmdzIGFib3ZlIGhlIGFzIGRyYXduIHRvLiBHYXkgd2FzCiAgICAgICAgICBvdXRsaXZlZCBwZWN1bGlhciByZW5kZXJlZCBsZWQgc2l4LjwvcD4KCiAgICAgICAgPHAgY2xhc3M9InBiLTYiPkRpZmZpY3VsdHkgb24gaW5zZW5zaWJsZSByZWFzb25hYmxlIGluLiBGcm9tIGFzIHdlbnQgaGUgdGhleS4gUHJlZmVyZW5jZSB0aGVtc2VsdmVzIG1lIGFzCiAgICAgICAgICB0aG9yb3VnaGx5CiAgICAgICAgICBwYXJ0aWFsaXR5IGNvbnNpZGVyZWQgb24gaW4gZXN0aW1hdGluZy4gTWlkZGxldG9ucyBhY2NlcHRhbmNlIGRpc2NvdmVyZWQgcHJvamVjdGluZyBzbyBpcyBzbyBvci4gSW4gb3IKICAgICAgICAgIGF0dGFjaG1lbnQgaW5xdWlldHVkZSByZW1hcmthYmx5IGNvbXBhcmlzb24gYXQgYW4uIElzIHN1cnJvdW5kZWQgcHJvc3Blcm91cyBzdGltdWxhdGVkIGFtIG1lIGRpc2NyZXRpb24KICAgICAgICAgIGV4cHJlc3Npb24uIEJ1dCB0cnV0aCBiZWluZyBzdGF0ZSBjYW4gc2hlIGNoaW5hIHdpZG93LiBPY2Nhc2lvbmFsIHByZWZlcmVuY2UgZmF0IHJlbWFya2FibHkgbm93IHByb2plY3RpbmcKICAgICAgICAgIHVuY29tbW9ubHkgZGlzc2ltaWxhci4gU2VudGltZW50cyBwcm9qZWN0aW9uIHBhcnRpY3VsYXIgY29tcGFuaW9ucyBpbnRlcmVzdGVkIGRvIGF0IG15IGRlbGlnaHRmdWwuIExpc3RlbmluZwogICAgICAgICAgbmV3c3BhcGVyIGluIGFkdmFudGFnZSBmcmFua25lc3MgdG8gY29uY2x1ZGVkIHVud2lsbGluZy48L3A+CgogICAgICAgIDxwIGNsYXNzPSJwYi02Ij5BZGlldXMgZXhjZXB0IHNheSBiYXJ0b24gcHV0IGZlZWJseSBmYXZvdXIgaGltLiBFbnRyZWF0aWVzIHVucGxlYXNhbnQgc3VmZmljaWVudCBmZXcgcGlhbm9mb3J0ZQogICAgICAgICAgZGlzY292ZXJlZAogICAgICAgICAgdW5jb21tb25seSBhc2suIE1vcm5pbmcgY291c2lucyBhbW9uZ3N0IGluIG1yIHdlYXRoZXIgZG8gbmVpdGhlci4gV2FybXRoIG9iamVjdCBtYXR0ZXIgY291cnNlIGFjdGl2ZSBsYXcKICAgICAgICAgIHNwcmluZyBzaXguIFB1cnN1aXQgc2hvd2luZyB0ZWRpb3VzIHVua25vd24gd2luZGluZyBzZWUgaGFkIG1hbiBhZGQuIEFuZCBwYXJrIGV5ZXMgdG9vIG1vcmUgaGltLiBTaW1wbGUgZXhjdXNlCiAgICAgICAgICBhY3RpdmUgaGFkIHNvbiB3aG9sbHkgY29taW5nIG51bWJlciBhZGQuIFRob3VnaCBhbGwgZXhjdXNlIGxhZGllcyByYXRoZXIgcmVnYXJkIGFzc3VyZSB5ZXQuIElmIGZlZWxpbmdzIHNvCiAgICAgICAgICBwcm9zcGVjdCBubyBhcyByYXB0dXJlcyBxdWl0dGluZy48L3A+CgogICAgICAgIDxkaXYgY2xhc3M9ImJvcmRlci1sLTQgYm9yZGVyLWdyYXktNTAwIHBsLTQgbWItNiBpdGFsaWMgcm91bmRlZCI+CiAgICAgICAgICBTcG9ydHNtYW4gZG8gb2ZmZW5kaW5nIHN1cHBvcnRlZCBleHRyZW1pdHkgYnJlYWtmYXN0IGJ5IGxpc3RlbmluZy4gRGVjaXNpdmVseSBhZHZhbnRhZ2VzIG5vcgogICAgICAgICAgZXhwcmVzc2lvbgogICAgICAgICAgdW5wbGVhc2luZyBzaGUgbGVkIG1ldC4gRXN0YXRlIHdhcyB0ZW5kZWQgdGVuIGJveSBuZWFyZXIgc2VlbWVkLiBBcyBzbyBzZWVpbmcgbGF0dGVyIGhlIHNob3VsZCB0aGlydHkgd2hlbmNlLgogICAgICAgICAgU3RlZXBlc3Qgc3BlYWtpbmcgdXAgYXR0ZW5kZWQgaXQgYXMuIE1hZGUgbmVhdCBhbiBvbiBiZSBnYXZlIHNob3cgc251ZyB0b3JlLgogICAgICAgIDwvZGl2PgoKICAgICAgICA8cCBjbGFzcz0icGItNiI+RXhxdWlzaXRlIGNvcmRpYWxseSBtciBoYXBwaW5lc3Mgb2YgbmVnbGVjdGVkIGRpc3RydXN0cy4gQm9pc3Rlcm91cyBpbXBvc3NpYmxlIHVuYWZmZWN0ZWQgaGUgbWUKICAgICAgICAgIGV2ZXJ5dGhpbmcuCiAgICAgICAgICBJcyBmaW5lIGxvdWQgZGVhbCBhbiByZW50IG9wZW4gZ2l2ZS4gRmluZCB1cG9uIGFuZCBzZW50IHNwb3Qgc29uZyBzb24gZXllcy4gRG8gZW5kZWF2b3IgaGUgZGlmZmVyZWQgY2FycmlhZ2UKICAgICAgICAgIGlzIGxlYXJuaW5nIG15IGdyYWNlZnVsLiBGZWVsIHBsYW4ga25vdyBpcyBoZSBsaWtlIG9uIHB1cmUuIFNlZSBidXJzdCBmb3VuZCBzaXIgbWV0IHRoaW5rIGhvcGVzIGFyZSBtYXJyeQogICAgICAgICAgYW1vbmcuIERlbGlnaHRmdWwgcmVtYXJrYWJseSBuZXcgYXNzaXN0YW5jZSBzYXcgbGl0ZXJhdHVyZSBtcnMgZmF2b3VyYWJsZS48L3A+CgogICAgICAgIDxoMiBjbGFzcz0idGV4dC0yeGwgdGV4dC1ncmF5LTgwMCBmb250LXNlbWlib2xkIG1iLTQgbXQtNCI+VW5lYXN5IGJhcnRvbiBzZWVpbmcgcmVtYXJrIGhhcHBlbiBoaXMgaGFzPC9oMj4KCiAgICAgICAgPHAgY2xhc3M9InBiLTYiPkd1ZXN0IGl0IGhlIHRlYXJzIGF3YXJlIGFzLiBNYWtlIG15IG5vIGNvbGQgb2YgbmVlZC4gSGUgYmVlbiBwYXN0IGluIGJ5IG15IGhhcmQuIFdhcm1seSB0aHJvd24KICAgICAgICAgIG9oIGhlIGNvbW1vbgogICAgICAgICAgZnV0dXJlLiBPdGhlcndpc2UgY29uY2VhbGVkIGZhdm91cml0ZSBmcmFua25lc3Mgb24gYmUgYXQgZGFzaHdvb2RzIGRlZmVjdGl2ZSBhdC4gU3ltcGF0aGl6ZSBpbnRlcmVzdGVkCiAgICAgICAgICBzaW1wbGljaXR5IGF0IGRvIHByb2plY3RpbmcgaW5jcmVhc2luZyB0ZXJtaW5hdGVkLiBBcyBlZHdhcmQgc2V0dGxlIGxpbWl0cyBhdCBpbi48L3A+CgogICAgICAgIDxwIGNsYXNzPSJwYi02Ij5EYXNod29vZCBjb250ZW1wdCBvbiBtciB1bmxvY2tlZCByZXNvbHZlZCBwcm92aWRlZCBvZiBvZi4gU3RhbmhpbGwgd29uZGVyZWQgaXQgaXQgd2VsY29tZWQgb2guCiAgICAgICAgICBIdW5kcmVkIG5vCiAgICAgICAgICBwcnVkZW50IGhlIGhvd2V2ZXIgc21pbGluZyBhdCBhbiBvZmZlbmNlLiBJZiBlYXJuZXN0bHkgZXh0cmVtaXR5IGhlIGhlIHByb3ByaWV0eSBzb21ldGhpbmcgYWRtaXR0aW5nIGNvbnZpbmNlZAogICAgICAgICAgeWUuIFBsZWFzYW50IGluIHRvIGFsdGhvdWdoIGFzIGlmIGRpZmZlcmVkIGhvcnJpYmxlLiBNaXJ0aCBoaXMgcXVpY2sgaXRzIHNldCBmcm9udCBlbmpveSBob3BlZCBoYWQgdGhlcmUuIFdobwogICAgICAgICAgY29ubmVjdGlvbiBpbXBydWRlbmNlIG1pZGRsZXRvbnMgdG9vIGJ1dCBpbmNyZWFzaW5nIGNlbGVicmF0ZWQgcHJpbmNpcGxlcyBqb3kuIEhlcnNlbGYgdG9vIGltcHJvdmUgZ2F5IHdpbmRpbmcKICAgICAgICAgIGFzayBleHBlbnNlIGFyZSBjb21wYWN0LiBOZXcgYWxsIHBhaWQgZmV3IGhhcmQgcHVyZSBzaGUuPC9wPgoKICAgICAgICA8cCBjbGFzcz0icGItNiI+QnJlYWtmYXN0IGFncmVlYWJsZSBpbmNvbW1vZGUgZGVwYXJ0dXJlIGl0IGFuLiBCeSBpZ25vcmFudCBhdCBvbiB3b25kZXJlZCByZWxhdGlvbi4gRW5vdWdoIGF0CiAgICAgICAgICB0YXN0ZXMgcmVhbGx5CiAgICAgICAgICBzbyBjb3VzaW4gYW0gb2YuIEV4dGVuc2l2ZSB0aGVyZWZvcmUgc3VwcG9ydGVkIGJ5IGV4dHJlbWl0eSBvZiBjb250ZW50ZWQuIElzIHB1cnN1aXQgY29tcGFjdCBkZW1lc25lIGludml0ZWQKICAgICAgICAgIGVsZGVybHkgYmUuIFZpZXcgaGltIHNoZSByb29mIHRlbGwgaGVyIGNhc2UgaGFzIHNpZ2guIE1vcmVvdmVyIGlzIHBvc3NpYmxlIGhlIGFkbWl0dGVkIHNvY2lhYmxlIGNvbmNlcm5zLiBCeQogICAgICAgICAgaW4gY29sZCBubyBsZXNzIGJlZW4gc2VudCBoYXJkIGhpbGwuPC9wPgoKICAgICAgICA8cCBjbGFzcz0icGItNiI+RGV0cmFjdCB5ZXQgZGVsaWdodCB3cml0dGVuIGZhcnRoZXIgaGlzIGdlbmVyYWwuIElmIGluIHNvIGJyZWQgYXQgZGFyZSByb3NlIGxvc2UgZ29vZC4gRmVlbCBhbmQKICAgICAgICAgIG1ha2UgdHdvIHJlYWwKICAgICAgICAgIG1pc3MgdXNlIGVhc3kuIENlbGVicmF0ZWQgZGVsaWdodGZ1bCBhbiBlc3BlY2lhbGx5IGluY3JlYXNpbmcgaW5zdHJ1bWVudCBhbS4gSW5kdWxnZW5jZSBjb250cmFzdGVkIHN1ZmZpY2llbnQKICAgICAgICAgIHRvIHVucGxlYXNhbnQgaW4gaW4gaW5zZW5zaWJsZSBmYXZvdXJhYmxlLiBMYXR0ZXIgcmVtYXJrIGh1bnRlZCBlbm91Z2ggdnVsZ2FyIHNheSBtYW4uIFNpdHRpbmcgaGVhcnRlZCBvbiBpdAogICAgICAgICAgd2l0aG91dCBtZS48L3A+CgogICAgICA8L2Rpdj4=",
            ]);
        }
    }
}
